// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OrderPlaceSDK
import AVFoundation
import AddressBook
import Foundation
import MapKit
@_exported import OrderPlaceSDK
import PassKit
import Swift
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers public class GpsService : OrderPlaceSDK.OrderPlaceService, CoreLocation.CLLocationManagerDelegate {
  override public func getServiceName() -> Swift.String
  override public func initialize()
  override public func handleMessage(method: Swift.String, body: Foundation.NSDictionary, callback: OrderPlaceSDK.CallbackHandler?)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol cardIODelegate : AnyObject {
  @objc func scan(body: Foundation.NSDictionary, callback: OrderPlaceSDK.CallbackHandler?)
  @objc func initialize()
}
@objc @_inheritsConvenienceInitializers open class OrderPlaceService : ObjectiveC.NSObject {
  public var vc: UIKit.UIViewController!
  public var params: Any?
  open func getServiceName() -> Swift.String
  open func initialize()
  open func handleMessage(method: Swift.String, body: Foundation.NSDictionary, callback: OrderPlaceSDK.CallbackHandler?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WeChatPayDelegate : AnyObject {
  @objc func wechatPayOrder(body: Foundation.NSDictionary, callback: OrderPlaceSDK.CallbackHandler?)
  @objc func wechatGetVersion(callback: OrderPlaceSDK.CallbackHandler?)
  @objc func isInstalled(callback: OrderPlaceSDK.CallbackHandler?)
  @objc func wechatApplicationOpenUrl(_ app: UIKit.UIApplication, url: Foundation.URL)
  @objc func wechatApplication(_ app: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity)
}
@_inheritsConvenienceInitializers @objc public class CallbackHandler : ObjectiveC.NSObject {
  @objc public var cc: WebKit.WKUserContentController!
  @objc public var callback: Swift.String!
  @objc public var webView: WebKit.WKWebView!
  @objc public func success(response: Any)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class OrderPlace : ObjectiveC.NSObject {
  public static func makeViewController(vcId: Swift.String) -> UIKit.UIViewController
  @objc public static func openUrl(caller: UIKit.UIViewController, url: Swift.String, options: [Swift.String : Any], closeCB: ((Any?) -> Swift.Void)? = nil)
  @objc public static func openUrl(caller: UIKit.UIViewController, url: Swift.String, options: [Swift.String : Any], services: Swift.Array<OrderPlaceSDK.OrderPlaceService>, closeCB: ((Any?) -> Swift.Void)? = nil)
  @objc public static func scan(caller: UIKit.UIViewController, options: [Swift.String : Any], closeCB: ((Any?) -> Swift.Void)? = nil)
  @objc public static func scanDecode(caller: UIKit.UIViewController, options: [Swift.String : Any]?, closeCB: ((Any?) -> Swift.Void)? = nil)
  @objc public static func checkCameraPermission(callback: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public static func openSetting()
  @objc public static func application(_ app: UIKit.UIApplication, open url: Foundation.URL)
  @objc public static func getImagePathWithName(name: Swift.String, type: Swift.String) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc public class OrderViewController : UIKit.UIViewController, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  public func closeKeyboard()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension OrderViewController : UIKit.UINavigationControllerDelegate {
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc dynamic public func navigationControllerSupportedInterfaceOrientations(_ navigationController: UIKit.UINavigationController) -> UIKit.UIInterfaceOrientationMask
}
extension OrderViewController {
  public func scannerApplicationOpenUrl(_ app: UIKit.UIApplication, url: Foundation.URL)
  public func scannerApplication(_ app: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity)
}
extension OrderViewController {
  public func showAlert(title: Swift.String?, message: Swift.String?, OKHandler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
}
extension OrderViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public func JJPrint<T>(_ message: T, file: Swift.String = #file, _ func: Swift.String = #function, _ lineNumber: Swift.Int = #line)
@objc public protocol StripeAppleDelegate : AnyObject {
  @objc func stripeAppleInitialize()
  @objc func stripeAppleMakePaymentRequest(_ body: Foundation.NSDictionary, _ callback: OrderPlaceSDK.CallbackHandler?)
  @objc func stripeAppleCompleteLastTransaction(_ body: Foundation.NSDictionary, _ callback: OrderPlaceSDK.CallbackHandler?)
  @objc var options: [Swift.String : Any]? { get set }
  @objc var baseViewController: UIKit.UIViewController? { get set }
}
@objc public protocol AlipayDelegate : AnyObject {
  @objc func AlipayOrder(body: Foundation.NSDictionary, callback: OrderPlaceSDK.CallbackHandler?)
  @objc func AlipayGetVersion(callback: OrderPlaceSDK.CallbackHandler?)
  @objc func AlipayApplicationOpenUrl(_ app: UIKit.UIApplication, url: Foundation.URL)
  @objc func AlipayFetchOrderInfo(url: Swift.String, alipayScheme: Swift.String) -> Swift.Bool
  @objc var AliapyWebView: WebKit.WKWebView? { get set }
}
